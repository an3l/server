diff --git a/include/my_time.h b/include/my_time.h
index cec168c6fd6..da9172f4976 100644
--- a/include/my_time.h
+++ b/include/my_time.h
@@ -56,7 +56,7 @@ extern uchar days_in_month[];
 #endif
 
 /* Flags to str_to_datetime */
-
+typedef uint my_time_flags_t;
 /*
   TIME_FUZZY_DATES is used for the result will only be used for comparison
   purposes. Conversion is as relaxed as possible.
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index 6a58a324ae2..db499caeaac 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -69,7 +69,7 @@ SET (SQL_SOURCE
                filesort_utils.cc
                filesort.cc gstream.cc
                signal_handler.cc
-               handler.cc json_mysql_binary.cc
+               handler.cc json_mysql_binary.cc json_dom.cc
                hostname.cc init.cc item.cc item_buff.cc item_cmpfunc.cc 
                item_create.cc item_func.cc item_geofunc.cc item_row.cc 
                item_strfunc.cc item_subselect.cc item_sum.cc item_timefunc.cc 
diff --git a/sql/field.cc b/sql/field.cc
index d801b7f221e..3f629569f01 100644
--- a/sql/field.cc
+++ b/sql/field.cc
@@ -43,6 +43,7 @@
 #include "log_event.h"                   // class Table_map_log_event
 #include <m_ctype.h>
 #include "json_mysql_binary.h"
+#include "json_dom.h"                    // Json_dom, Json_wrapper
 
 // Maximum allowed exponent value for converting string to decimal
 #define MAX_EXPONENT 1024
@@ -11170,18 +11171,52 @@ uint32 Field_blob::max_display_length() const
   }
 }
 
-/*****************************************************************************
- Mysql table 5.7 with json data handling
-*****************************************************************************/
-
- String *Field_mysql_json::val_str(String *buf1_tmp, String *buf2 __attribute__((unused)))
+ String *Field_mysql_json::val_str(String *buf1, String *buf2 __attribute__((unused)))
 {
   ASSERT_COLUMN_MARKED_FOR_READ;
-  String *buf1= Field_blob::val_str(buf1_tmp, buf2);
-  //buf1->set("",0,charset());	// A bit safer than buf1->length(0);
-  //if (is_null() || json_mysql_binary::parse_binary(buf1->ptr(), buf1->len()) )
-  //  buf1->set("",0,charset()); 
-  json_mysql_binary::parse_binary(buf1->ptr(), buf1->length());
+  Json_wrapper *wr;
+  bool isJson=true;
+
+  ASSERT_COLUMN_MARKED_FOR_READ;
+  // /DBUG_ASSERT(!is_null());
+  
+  String *s= Field_blob::val_str(buf1, buf2);
+
+  /*
+    The empty string is not a valid JSON binary representation, so we
+    should have returned an error. However, sometimes an empty
+    Field_json object is created in order to retrieve meta-data.
+    Return a dummy value instead of raising an error. Bug#21104470.
+
+    The field could also contain an empty string after forcing NULL or
+    DEFAULT into a not nullable JSON column using lax error checking
+    (such as INSERT IGNORE or non-strict SQL mode). The JSON null
+    literal is used to represent the empty value in this case.
+    Bug#21437989.
+  */
+  if (s->length() == 0)
+  {
+    Json_wrapper w(new (std::nothrow) Json_null());
+    wr->steal(&w);
+    isJson= false;
+  }
+
+  json_mysql_binary::Value v(json_mysql_binary::parse_binary(s->ptr(), s->length()));
+  if (v.type() == json_mysql_binary::Value::ERROR)
+  {
+    /* purecov: begin inspected */
+    //my_error(ER_INVALID_JSON_BINARY_DATA, MYF(0));
+    isJson= false;
+    /* purecov: end */
+  }
+
+  Json_wrapper w(v);
+  wr->steal(&w);
+  isJson= false;
+
+  if (is_null() || isJson || wr->to_string(buf1, true, field_name.str))
+    buf1->length(0);
+
   return buf1;
 }
 
diff --git a/sql/field.h b/sql/field.h
index cf0027d6aca..0215664b10b 100644
--- a/sql/field.h
+++ b/sql/field.h
@@ -48,6 +48,7 @@ class Item_equal;
 class Virtual_tmp_table;
 class Qualified_column_ident;
 class Table_ident;
+class Json_wrapper;
 
 enum enum_check_fields
 {
@@ -4794,6 +4795,7 @@ class Field_mysql_json :public Field_blob
     @param[in,out] buf2 unused
   */
   String *val_str(String *, String *);
+  bool val_json(Json_wrapper *);
 };
 
 uint pack_length_to_packflag(uint type);
diff --git a/sql/json_mysql_binary.cc b/sql/json_mysql_binary.cc
index 46ff11b1dc8..5e949416574 100644
--- a/sql/json_mysql_binary.cc
+++ b/sql/json_mysql_binary.cc
@@ -13,6 +13,7 @@
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */
 #include "json_mysql_binary.h"
+#include "json_dom.h"
 #include <algorithm>            // std::min
 
 #define JSONB_TYPE_SMALL_OBJECT   0x0
